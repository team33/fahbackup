#!/bin/bash -e
#
# fahbackup 1.4
# Back up $HOME/fah to $HOME/fahbackup-data
#

trap "echo Premature exit." ERR

usage()
{
	echo Usage:
	echo -e \\t$0 -V
	echo -e \\t$0 -h
}

OPT_VERSION=
OPT_USAGE=

while [ -n "$1" ]; do
	case $1 in
		(-V)
			OPT_VERSION=1
			shift
			;;
		(-h)
			OPT_USAGE=1
			shift
			;;
		(-*)
			echo ERROR: invalid option -- $1
			exit 1
			;;
		(*)
			break
			;;
	esac
done

if [ -n "$1" ]; then
	echo ERROR: excess argument -- $1
	exit 1
fi

if [ -n "$OPT_VERSION$OPT_USAGE" -a "$OPT_VERSION$OPT_USAGE" != "1" ]; then
	echo ERROR: conflicting arguments
	exit 1
fi

[ -n "$OPT_USAGE" ] && usage && exit 0
[ -n "$OPT_VERSION" ] && echo fahbackup 1.4 && exit 0

if [ -z "$LOGNAME" -a -z "$HOME" ]; then
	echo \$LOGNAME not set. \$HOME not set. Cannot run.
	exit 1
fi

if [ -n "$LOGNAME" ]; then
	eval TARGET=~"$LOGNAME"
else
	TARGET="$HOME"
fi
LOCK=$(echo "$TARGET" | tr / -)

cd "$TARGET"

if ! ls fah/* > /dev/null 2>&1 ; then
	echo "$PWD"/fah empty. Cannot run.
	exit 1
fi

exec 3>/tmp/fahbackup.lock$LOCK
echo -n obtaining the lock...
flock -w 60 -x 3
echo obtained

rm -fr fahbackup-data/wip
mkdir -p fahbackup-data/wip

#
#Find current WU
file=$(ls -rt fah/work/*.ckp 2> /dev/null | tail -1)
if [ -n "$file" ]; then
	# determine checkpointing interval
	ckpt=`cat fah/client.cfg | grep checkpoint || true`
	if [ -z "$ckpt" ]; then
	        intv=900
	else
	        intv=$(($((${ckpt:11:2}))*60))
	fi

	#
	#Find last update and now
	last=$(stat -c "%Y" $file)
	now=$(date +%s)

	#
	# only backup if we weren't restarted
	echo now-last: $((now-last))
	echo intv: $((intv))
	#
	# if we are less than 1 minute from writing
	# or if we've just written a checkpoint then
	# wait one minute
	while [ $((now-last)) -lt $((intv+60)) -a \( $((now-last)) -gt $((intv-60)) -o $((now-last)) -lt 60 \) ]; do
		echo please wait ...
		sleep 5
		last=$(stat -c "%Y" $file)
		now=$(date +%s)
		echo now-last: $((now-last))
		echo intv: $((intv))
	done
else
	echo WARNING: checkpoint file not found. Proceeding anyway.
fi

#
#Back up fah directory
date=$(date +%Y-%m-%d-%H%M)
echo backing up...
#
# tar may return non-zero exit code if a file is changed mid-run;
# to accommodate this scenario we test the archive for consistency post-creation
# 
tar --exclude='.Trash*' -cf fahbackup-data/wip/$date.tar fah || true
if ! tar -tf fahbackup-data/wip/$date.tar > /dev/null ; then
	echo backup failed!
	exit 1
fi

CURRENT=$(ls fahbackup-data/current 2> /dev/null || true)
if [ -n "$CURRENT" ]; then
	#
	#Remove previous
	rm -fr fahbackup-data/previous
	#
	#Move current to previous
	mv fahbackup-data/current fahbackup-data/previous
else
	rm -fr fahbackup-data/current
fi
mv fahbackup-data/wip fahbackup-data/current
echo done
