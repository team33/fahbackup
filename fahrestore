#!/bin/bash -e
#
# fahrestore 1.3
# Restore $HOME/fah from $HOME/fahbackup-data
#

trap "echo Premature exit." ERR

usage()
{
	echo Usage:
	echo -e \\t$0 [-f] [previous]
	echo -e \\t$0 -V
	echo -e \\t$0 -h
}

OPT_FORCE=
OPT_CHOICE=
OPT_VERSION=
OPT_USAGE=

USE_PREVIOUS=0

while [ -n "$1" ]; do
	case $1 in
		(-f)
			OPT_FORCE=1
			shift
			;;
		(-V)
			OPT_VERSION=1
			shift
			;;
		(-h)
			OPT_USAGE=1
			shift
			;;
		(-*)
			echo ERROR: invalid option -- $1
			exit 1
			;;
		(*)
			break
			;;
	esac
done

while [ -n "$1" ]; do
	if [ -n "$OPT_CHOICE" ]; then
		echo ERROR: excess argument -- $1
		exit 1
	fi
	if [ "$1" != "previous" ]; then
		echo ERROR: invalid argument -- $1
		exit 1
	fi
	OPT_CHOICE=$1
	USE_PREVIOUS=1
	shift
done

if [ -n "$OPT_VERSION$OPT_USAGE" -a \( "$OPT_VERSION$OPT_USAGE$OPT_FORCE" != "1" -o -n "$OPT_CHOICE" \) ]; then
	echo ERROR: conflicting arguments
	exit 1
fi

[ -n "$OPT_USAGE" ] && usage && exit 0
[ -n "$OPT_VERSION" ] && echo fahrestore 1.3 && exit 0

if [ -z "$LOGNAME" -a -z "$HOME" ]; then
	echo \$LOGNAME not set. \$HOME not set. Cannot run.
	exit 1
fi

if [ -n "$LOGNAME" ]; then
	eval TARGET=~"$LOGNAME"
else
	TARGET="$HOME"
fi
LOCK=$(echo "$TARGET" | tr / -)

cd "$TARGET"

if ! mount | grep " on $PWD/fah type tmpfs" > /dev/null ; then
	echo "$PWD"/fah not mounted. Cannot run.
	exit 1
fi

[ -n "$OPT_FORCE" ] && rm -fr "$PWD"/fah > /dev/null 2>&1 || true

if ls fah/* > /dev/null 2>&1 ; then
	echo "$PWD"/fah not empty. Cannot run. Use -f to force removal of "$PWD"/fah
	exit 1
fi

exec 3>/tmp/fahbackup.lock$LOCK
echo -n obtaining the lock...
flock -x 3
echo obtained

cd fah
if [ $USE_PREVIOUS = 0 ]; then
	echo restoring...
	tar --strip-components=1 -xf "$(ls -rt ../fahbackup-data/current/*.tar 2> /dev/null | tail -1)" && RET=0 || RET=1
else
	RET=1
fi

if [ $RET -ne 0 ]; then
	echo restoring previous...
	rm -fr ../fah 2> /dev/null || true
	tar --strip-components=1 -xf "$(ls -rt ../fahbackup-data/previous/*.tar 2> /dev/null | tail -1)"
fi

echo done
